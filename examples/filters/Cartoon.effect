// Adapted from:
//Darklink's shader modified to by Charles 'Surn' Fettinger for use with obs-shaderfilter 3/2019

#pragma hue_steps 3, 10
#pragma value_steps 2, 10

uniform int hue_steps = 5;
uniform int value_steps = 2;
uniform bool Apply_To_Alpha_Layer = true;

float3 rgb2hsv(float3 c)
{
    float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

float fit(float v, int factor)
{
    return round(v * factor) / factor;
}

float4 mainImage(VertData v_in) : TARGET
{
    float4 rgba = image.Sample(textureSampler, v_in.uv);
    if (rgba.a > 0.0 || Apply_To_Alpha_Layer == false) {
      float3 hsv = rgb2hsv(rgba.rgb);
      hsv = float3(fit(hsv.x, hue_steps), hsv.y, fit(hsv.z, value_steps));
      rgba = float4(hsv2rgb(hsv), rgba.a);
    }
    return rgba;
}
