// Add more life to previous shader https://www.shadertoy.com/view/WllGRn
// Very similar to https://www.shadertoy.com/view/Wll3RS
// https://www.shadertoy.com/view/WtlGzS

#pragma force 0.1, 0.3, 0.01
#pragma speed 0.0, 10.0
#pragma amount 0.1, 5.0

uniform float force = .28;
uniform float speed = 2.0;
uniform float amount = 2.0;
uniform float4 water_color = {0.07, 0.55, 0.78, 0.0};

float rand(float2 co) {
    return fract(sin(dot(co.xy , float2(12.9898, 78.233))) * 43758.5453);
}

float bubbles( float2 uv, float size, float speed, float timeOfst, float blur)
{
    float2 ruv = uv * size  + .05;
    float2 id = ceil(ruv) + speed;

    float t = (iTime + timeOfst) * speed;

    ruv.y -= t * (rand(float2(id.x)) * 0.5 + .5) * .1;
    float2 guv = fract(ruv) - 0.5;

    ruv = ceil(ruv);
    float g = length(guv);

    float v = rand(ruv) * 0.5;
    v *= step(v, force);

    float m = smoothstep(v,v - blur, g);

    v*=.85;
    m -= smoothstep(v, v - .1, g);

    g = length(guv - float2(v * .35, v * .35));
    float hlSize = v * .75;
    m += smoothstep(hlSize, 0., g) * .75;

    return m;
}

float4 mainImage(VertData v_in) : TARGET
{
    float2 uv = v_in.uv;
    uv.x *= iResolution.x / iResolution.y;

    float m = 0.;

    float sizeFactor = iResolution.y / 20.;

    float fstep = .1/amount;
    for(float i=-1.0; i<=0.; i+=fstep){
        float2 iuv = uv + float2(cos(uv.y * 2. + i * 20. + iTime * .5) * .1, 0.);
        float size = (i*.15+0.2) * sizeFactor + 10.;
        m += bubbles(iuv + float2(i * .1, 0.), size, -speed * 10 + i * 5., i * 10., .3 + i * .25) * abs(i);
    }

    return float4(water_color.rgb, 0.) + m * .4;
}
